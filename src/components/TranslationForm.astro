---
import { SUPPORTED_LANGUAGES } from '../types/translation';
---

<div class="bg-gray-800 rounded-lg shadow-lg p-4 mb-6 border border-gray-700">
  <form id="translation-form" class="space-y-4">
    <div>
      <!-- <label for="input-text" class="block text-sm font-medium text-gray-300 mb-2">
        Masukkan teks dalam Bahasa Indonesia:
      </label> -->
      <div class="relative">
        <textarea
          id="input-text"
          name="text"
          rows="3"
          class="w-full px-3 py-2 pr-12 bg-gray-700 border border-gray-600 rounded-md text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 resize-none text-sm"
          placeholder="Masukkan teks dalam Bahasa Indonesia..."
          required
        ></textarea>
        <button
          type="button"
          id="speech-btn"
          class="absolute right-2 top-2 p-2 text-gray-400 hover:text-blue-400 transition-colors"
          title="Rekam suara"
        >
          <svg id="mic-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
          <svg id="recording-icon" class="w-5 h-5 hidden text-red-500" fill="currentColor" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10"></circle>
          </svg>
        </button>
      </div>
    </div>
    
    <div>
      <label for="target-language" class="block text-sm font-medium text-gray-300 mb-2">
        Pilih bahasa target:
      </label>
      <select
        id="target-language"
        name="targetLanguage"
        class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 text-sm"
      >
        {SUPPORTED_LANGUAGES.map(lang => (
          <option value={lang.code} selected={lang.code === 'en'}>
            {lang.label}
          </option>
        ))}
      </select>
    </div>
    
    <button
      type="submit"
      id="submit-btn"
      class="w-full bg-blue-600 text-white py-2.5 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-800 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium"
    >
      <span id="submit-text">Terjemahkan</span>
      <span id="loading-text" class="hidden">
        <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Menerjemahkan...
      </span>
    </button>
  </form>
</div>

<script>
  import type { TranslationResponse } from '../types/translation';
  
  const form = document.getElementById('translation-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text') as HTMLSpanElement;
  const loadingText = document.getElementById('loading-text') as HTMLSpanElement;
  const speechBtn = document.getElementById('speech-btn') as HTMLButtonElement;
  const micIcon = document.getElementById('mic-icon') as unknown as SVGElement;
  const recordingIcon = document.getElementById('recording-icon') as unknown as SVGElement;
  const inputText = document.getElementById('input-text') as HTMLTextAreaElement;
  
  // Speech Recognition Setup
  let recognition: any = null;
  let isRecording = false;
  
  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = 'id-ID';
    recognition.continuous = false;
    recognition.interimResults = false;
    
    recognition.onstart = () => {
      isRecording = true;
      micIcon.classList.add('hidden');
      recordingIcon.classList.remove('hidden');
      speechBtn.classList.add('animate-pulse');
    };
    
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      inputText.value = transcript;
    };
    
    recognition.onend = () => {
      isRecording = false;
      micIcon.classList.remove('hidden');
      recordingIcon.classList.add('hidden');
      speechBtn.classList.remove('animate-pulse');
    };
    
    recognition.onerror = (event: any) => {
      console.error('Speech recognition error:', event.error);
      isRecording = false;
      micIcon.classList.remove('hidden');
      recordingIcon.classList.add('hidden');
      speechBtn.classList.remove('animate-pulse');
      
      if (event.error === 'not-allowed') {
        alert('Akses mikrofon ditolak. Silakan izinkan akses mikrofon untuk menggunakan fitur ini.');
      }
    };
  } else {
    speechBtn.style.display = 'none';
  }
  
  // Speech Recognition Event
  speechBtn?.addEventListener('click', () => {
    if (!recognition) return;
    
    if (isRecording) {
      recognition.stop();
    } else {
      recognition.start();
    }
  });
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const text = formData.get('text') as string;
    const targetLanguage = formData.get('targetLanguage') as string;
    
    if (!text.trim()) {
      alert('Mohon masukkan teks yang ingin diterjemahkan');
      return;
    }
    
    // Show loading state
    submitBtn.disabled = true;
    submitText.classList.add('hidden');
    loadingText.classList.remove('hidden');
    
    try {
      const response = await fetch('/api/gemini', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text, targetLanguage })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Terjadi kesalahan saat menerjemahkan');
      }
      
      const result: TranslationResponse = await response.json();
      
      // Save to localStorage
      const historyItem = {
        id: Date.now().toString(),
        originalText: result.originalText,
        targetLanguage: result.targetLanguage,
        results: result.results,
        timestamp: result.timestamp
      };
      
      const history = JSON.parse(localStorage.getItem('translation-history') || '[]');
      history.unshift(historyItem);
      // Keep only last 50 items
      if (history.length > 50) {
        history.splice(50);
      }
      localStorage.setItem('translation-history', JSON.stringify(history));
      
      // Dispatch custom event to update results
      window.dispatchEvent(new CustomEvent('translation-complete', {
        detail: result
      }));
      
      // Clear form
      form.reset();
      
    } catch (error) {
      console.error('Translation error:', error);
      alert(error instanceof Error ? error.message : 'Terjadi kesalahan saat menerjemahkan');
    } finally {
      // Hide loading state
      submitBtn.disabled = false;
      submitText.classList.remove('hidden');
      loadingText.classList.add('hidden');
    }
  });
</script>